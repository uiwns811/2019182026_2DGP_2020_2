3. 함수
프로그래밍에서의 함수는 어떤 특정한 일을 처리하는 기능을 모아놓은 것이다.
def 함수명(매개변수) :
	수행할 문장1
	수행할 문장2
로 구성된다. 
매개변수는 함수로 전달되는 값인 인수를 함수에서 받을 때 사용되는 변수이다.
함수를 사용하기 위해서는 먼저 함수를 정의하고, 함수를 호출한다. 
함수는 여러 작업을 모아 하나로 처리할 수 있게 해주며, 여러 개의 값을 return할 수 있다. 
인자의 타입에 따라 자동으로 연산 기능이 결정된다. 
.
.
4. Recursive call (재귀함수 호출)
재귀 호출은 함수 내부에서 함수 자기자신을 다시 호출하는 방식이다. 함수 호출은 메모리의 스택을 사용하고, 재귀함수는 함수 내에서 계속해서 자기 자신을 호출하기 때문에 스택 오버플로우가 발생한다. 이를 막기 위해 재귀 호출을 중단하기 위한 종료 조건 명령문이 포함되어야 한다. 재귀함수 호출은 프로그래밍을 직관적이고 간결하게 할 수 있으며, 이해하기 쉽다는 장점이 있으나, 반복문으로 구현한 코드보다 실행 시간이 오래 걸린다는 단점을 가지고 있다. 

재귀함수를 Python에서 활용할 수 있는 예에는 기본적으로 피보나치 수열, 카운트다운, 펙토리얼 연산, 최소공배수 구하기 등이 있으며, 다음은 카운트다운을 Python으로 구현한 예시이다.
>>> def countdown(num):
	if num==0:
		return num
	else:
		print(num)
		return countdown(num-1)

	
>>> countdown(10)
10
9
8
7
6
5
4
3
2
1
0
.
.
5. Fractal Graphics
프랙탈(Fractal)이란 작은 구조가 전체 구조와 비슷한 형태로 끝없이 되풀이되는 구조이다. 조각난 부분을 확대하면 전체와 같은 모양이 되는 구조이다. 프랙탈은 자기유사성과 순환성을 지니고 있는데, 이를 이용하여 함수의 재귀호출을 통해 프랙탈의 순환성을 구현할 수 있다. 

Python의 터틀(turtle)은 터틀 모듈을 import했을 때 만들어지는 객체이다. 터틀의 위치를 변경하며 펜의 움직임을 그래픽으로 나타낼 수 있다. 따라서 터틀 모듈을 재귀적으로 호출하여 프랙탈을 구현할 수 있다. 

다음은 turtle을 이용하여 fractal 중 하나인 시에르핀스키(sierpinski)의 삼각형을 구현한 사진이다. 

















