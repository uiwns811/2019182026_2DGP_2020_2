1. 
Git(이하 깃)은 소프트웨어 개발 소스코드를 효율적으로 관리할 수 있게 해주는 버전관리 소프트웨어이다. 깃은 같은 파일을 동시에 여러 명이서 작업할 수 있으며, 각각의 복사본을 저장한다. 또한 깃은 버전관리 소프트웨어이기 때문에 커밋 명령을을 통해 이전 상태(HEAD)의 버전으로 되돌릴 수도 있다는 큰 장점을 가지고 있다.
.
GitHub는 깃을 지원하는 서비스 중의 하나로, 오픈소스 라이브러리를 활용할 수 있다. 깃허브를 사용하기 위해서는 깃허브에 가입한다. 로컬 컴퓨터에서 작업하기 위해 깃을 설치한 뒤 커맨드 라인에 정보를 입력한다. 프로젝트를 시작할 때, 프로젝트를 저장하는 저장소를 지정한다. 다른 사람들과 공유할 수 있는 공공 저장소와 개인 저장소(유료) 중에서 선택할 수 있다. 로컬 저장소에서 작업을 진행할 때는 세 단계를 거치게 되는데, 실제 파일들로 이루어진 작업 디렉토리에서 변경된 파일은 준비 영역의 역할을 하는 인덱스에 추가된다. 이후 변경 내용을 HEAD에 반영한다. 해당 변경 내용을 원격 저장소로 발행하면 master 가지를 생성한다. 따라서 branch에서 개발을 진행한 뒤 master가지에 병합한다.
.
Git에서 관리하는 파일들은 modifed, staged, commited의 3가지의 상태를 가지며, working directory, staging area, repository 영역으로 구분된다.
.
Git 명령어 정리
git init : 현재 directory에 git 저장소를 생성한다. 
git add 파일명 : 파일을 staging area에 추가한다.
git commit -m "커밋메시지" : stage에 추가된 파일 목록을 커밋한다. 
git status : 커밋되지 않은 변경사항을 조회한다. 
git rm : 파일을 working directory와 staging area에서 삭제한다.
git mv 파일명 새 파일명 : 파일의 위치 또는 이름을 변경한다.
clean : working directory의 필요없는 파일을 삭제한다.
git branch 브랜치명 : 브랜치명의 새로운 브런치를 만든다.
.
.
2.
-2.1. 계산, 나누기와 나머지 연산
.
>>> 1 + 2
3
>>> 100 - 1
99
>>> 7 * 52
364
>>> 1024 / 8
128.0
>>> 1 / 2
0.5
>>> 1 // 2
0
>>> 4 / 3
1.3333333333333333
>>> 4 // 3
1
>>> 7 % 3
1
>>> 7.5 % 3
1.5
>>> 4 % 2.1
1.9
>>> 1024 // 8
128
.
# C/C++과는 달리 / 는 부동소수점을 적용한 연산자이고, // 가 정수 나누기 연산자이다. 이외에는 타 언어와 동일하여 아직까지는 무리가 없다. 
.
.

-2.2. 변수
.
>>> pi = 3.1415926535
>>> 
>>> pi * 4 ** 2
50.265482456
>>> pi * 2.5 ** 2
19.634954084375
>>> pi * 8 ** 2
201.061929824
>>> 
>>> print(pi)
3.1415926535
>>> 
>>> r =  7
>>> area = pi * r ** 2
>>> 
>>> print(area)
153.9380400215
>>> 
>>> r = 11
>>> area = pi * r ** 2
>>> 
>>> print(area)
380.1327110735
>>>
>>>
>>> a = 5
>>> b = 10
>>> c = b * a
>>> 
>>> print(a)
5
>>> print(c)
50
>>>
>>>
>>> name1 = "Trump"
>>> name2 = '강다니엘'
>>> 
>>> print(name1)
Trump
>>> print(name2)
강다니엘
>>> name1
'Trump'
>>> name2
'강다니엘'
>>> 
>>> name1 = "Sumin Lee"
>>> print(name1)
Sumin Lee
.
# 변수 이름을 짓고 해당하는 값을 설정하여 저장할 수 있다. 문자열(string)을 지정할 때 큰 따옴표와 작은 따옴표의 차이를 알아본 결과 무엇을 사용하든 상관없다는 것을 알았다. 그러나 큰 따옴표는 텍스트, 작은 따옴표는 기호나 식별자를 지정할 때 사용하는 것을 권장한다고 한다. 
.
.
-2.3. 기본자료형
>>> order = 4
>>> pi = 3.1415926535
>>> name = "Trump"
>>> 
>>> type(order)
<class 'int'>
>>> type(pi)
<class 'float'>
>>> type(name)
<class 'str'>
>>> 
>>> result = True
>>> type(result)
<class 'bool'>
>>> 
.
# 자료형을 알 수 있는 방식이 간결하다고 생각한다.
.
.
-2.4. 비교 연산
>>> 4>3
True
>>> 3.5 < -1.3
False
>>> 100 == 100
True
>>> 10 >= 10
True
>>> a = 365 > 366
>>> print(a)
False
>>> type(a)
<class 'bool'>
>>> 
>>> name1 = 'sumin'
>>> name2 = 'minsu'
>>> name3 = 'sumin'
>>> 
>>> name1 == name2
False
>>> name1 == name3
True
>>> name1 != name2
True
.
# 비교연산 또한 간결하다고 생각한다. 
.
.
-2.5. Str
>>> first = "Daehyun"
>>> last = "Lee"
>>> name = first + " " + last
>>> name
'Daehyun Lee'
>>> print(name)
Daehyun Lee
>>> 
>>> name * 2
'Daehyun LeeDaehyun Lee'
>>> name * 33
'Daehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun Lee'
>>> name[0]
'D'
>>> name[2]
'e'
>>> name[-1]
'e'
>>> name[-2]
'e'
>>> str1 = "hello"
>>> str2 = "world"
>>> 
>>> str3 = str1 + str2 + '!'
>>> str3
'helloworld!'
>>> print(str3)
helloworld!
>>> 
>>> str3[0]
'h'
>>> str3[-1]
'!'
>>> str3[3]
'l'
.
# 문자열 인덱스에 음수를 지정하면 문장열 뒤에서부터  시작한다는 것을 알 수 있다.
.
.
-2.6. Slice(슬라이스)
>>> title = "Python 2D Ggame Programming"
>>> title[0:6]
'Python'
>>> title[7:9]
'2D'
>>> title[10:14]
'Ggam'
>>> title = "Python 2D Game Programming"
>>> title[0:6]
'Python'
>>> title[7:9]
'2D'
>>> title[10:14]
'Game'
>>> title[:6]
'Python'
>>> title[-11:]
'Programming'
>>> title[::2]
'Pto DGm rgamn'
>>> title[::-1]
'gnimmargorP emaG D2 nohtyP'
>>>
>>>
>>> name = "Korea Polytechnic University"
>>> name[0:5]
'Korea'
>>> name[5:6]
' '
>>> name[::2]
'KraPltcncUiest'
>>> name[::-1]
'ytisrevinU cinhcetyloP aeroK'
.
# 슬라이스는 처음 배우는데, 문자열을 거꾸로 출력하는데 유용할 것 같다고 생각한다. 
.
.
-2.7. List
>>> twice = ['momo', 'sana', 'zwi', 'nayun', 'dahyun']
>>> black_pink = ['jisu', 'jeni', 'rose', 'risa']
>>> 
>>> twice
['momo', 'sana', 'zwi', 'nayun', 'dahyun']
>>> twice.append('jihyo')
>>> twice
['momo', 'sana', 'zwi', 'nayun', 'dahyun', 'jihyo']
>>> twice.sort()
>>> twice
['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi']
>>> len(twice)
6
>>> unite = twice + black_pink
>>> unite
['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']
>>> 
>>> unite.remove('momo')
>>> unite
['dahyun', 'jihyo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']
>>> 
>>> unite[0]
'dahyun'
>>> unite[-1]
'risa'
>>> unite[:3]
['dahyun', 'jihyo', 'nayun']
>>> [-3:]
SyntaxError: invalid syntax
>>> unite[-3:]
['jeni', 'rose', 'risa']
>>> unite[::2]
['dahyun', 'nayun', 'zwi', 'jeni', 'risa']
>>> unite[::-1]
['risa', 'rose', 'jeni', 'jisu', 'zwi', 'sana', 'nayun', 'jihyo', 'dahyun']
>>> sample = ['name', 1, 3.1415926535]
>>> sample
['name', 1, 3.1415926535]
.
# 리스트(List)는 []로 표현하는데 삽입, 삭제, 정렬이 가능하고 인덱스와 슬라이스를 사용할 수 있으며 하나의 리스트 안에는 여러 가지의 자료형이 들어갈 수 있다는 것을 알았다. 일반적으로 많이 사용할 수 있을 것 같다. 
.
.
-2.8. Dictionary
>>> score = {'momo' : 80, 'zwi' : 85, 'sana' : 98}
>>> type(score)
<class 'dict'>
>>> score['momo']
80
>>> score['nayun']
Traceback (most recent call last):
  File "<pyshell#117>", line 1, in <module>
    score['nayun']
KeyError: 'nayun'
>>> sccore['nayun'] = 100
Traceback (most recent call last):
  File "<pyshell#118>", line 1, in <module>
    sccore['nayun'] = 100
NameError: name 'sccore' is not defined
>>> score['nayun'] = 100
>>> score
{'momo': 80, 'zwi': 85, 'sana': 98, 'nayun': 100}
>>> del score['momo']
>>> score
{'zwi': 85, 'sana': 98, 'nayun': 100}
>>> score.keys()
dict_keys(['zwi', 'sana', 'nayun'])
>>> score.values()
dict_values([85, 98, 100])
>>> 'zwi' in score
True
>>> 'momo' in score
False
>>> 
>>> score.clear()
>>> score
{}
>>>
>>>
>>> students = { 2021 : 'minsu', 2022 : 'jaehyun', 2023 : 'sunwoo', 2024 : 'minjeong', 2025 : 'eunju'}
>>> type(students)
<class 'dict'>
>>> students[2022]
'jaehyun'
>>> students['sunwoo']
Traceback (most recent call last):
  File "<pyshell#140>", line 1, in <module>
    students['sunwoo']
KeyError: 'sunwoo'
>>> students.keys()
dict_keys([2021, 2022, 2023, 2024, 2025])
>>> students.values()
dict_values(['minsu', 'jaehyun', 'sunwoo', 'minjeong', 'eunju'])
.
# 딕셔너리는 key와 value로 이루어져있으며 삽입, 삭제, 검색이 가능하다는 것을 알 수 있다. 딕셔너리에서 key로 검색을 할 수 있는데, value로는 검색이 안된다는 사실을 알 수 있었다. key와 value이 맵핑되어 있는 형태라 유용하게 사용할 것 같다. 
.
.
-2.9. Tuple
>>> t1 = (1,2,3)
>>> t2 = (1, )
>>> t3 = ()
>>> t4 = 1,2,3,4
>>> t4
(1, 2, 3, 4)
>>> type(t4)
<class 'tuple'>
>>> t5 = (1, 'a', "part", (1, 2))
>>> t1[1:]
(2, 3)
>>> t1 + t5
(1, 2, 3, 1, 'a', 'part', (1, 2))
>>> t4 * t4
Traceback (most recent call last):
  File "<pyshell#142>", line 1, in <module>
    t4 * t4
TypeError: can't multiply sequence by non-int of type 'tuple'
>>> t4 * 2
(1, 2, 3, 4, 1, 2, 3, 4)
.
# 튜플(Tuple)은 리스트와 달리 ()로 표현하며, 삽입, 삭제, 수정이 불가능하다.  초기에 설정하면 변하지 않는 값으로 이용할 수 있다. 리스트와 비슷하지만  헷갈리면 안된다고 느꼈다.
.
.
-2.10. set
>>> s1 = {1,2,3}
>>> type(s1)
<class 'set'>
>>> s1 = {1,2,3,4}
>>> s1
{1, 2, 3, 4}
>>> s1 = {1,2,2,4}
>>> s1
{1, 2, 4}
>>> l1 = [1,2,2,2,2,3,3,3,3,5,5,5,5,5,]
>>> s1 = set(l1)
>>> s1
{1, 2, 3, 5}
>>> s2 = {3,5,6,7}
>>> s1 + s2
Traceback (most recent call last):
  File "<pyshell#154>", line 1, in <module>
    s1 + s2
TypeError: unsupported operand type(s) for +: 'set' and 'set'
>>> s1 | s2
{1, 2, 3, 5, 6, 7}
>>> s1 & s2
{3, 5}
>>> s2 -s 1
SyntaxError: invalid syntax
>>> s2 - s1
{6, 7}
>>> s1 - s2
{1, 2}
>>> s1.add(8)
>>> s1
{1, 2, 3, 5, 8}
>>> s2.remove(6)
>>> s2
{3, 5, 7}
>>>
>>>
>>> s3 = {3, 5, 1, 24, 9}
>>> s3
{1, 3, 5, 9, 24}
>>> s3.sort()
Traceback (most recent call last):
  File "<pyshell#154>", line 1, in <module>
    s3.sort()
AttributeError: 'set' object has no attribute 'sort'
.
# 세트(set)는 중복을 허용하지 않으며, 순서가 없기때문에 정렬을 할 수 없다는 것을 알 수 있다.
.
.
네 개의 데이터 타입을 헷갈리지 않고 적재적소에 이용할 수 있도록 익숙해져야겠다고 느꼈다. 
