1. 
- 1.1
안녕하십니까 교수님. 
2019182026 이수민입니다.

- 1.2
컴퓨터는 0~10 중 2 정도로 다룬다고 생각한다. 
컴퓨터를 사용하는데 기본적으로 필요한 정도는 구현할 수 있지만, 잘 다룬다고 할 수는 없다.

- 1.3
C언어와 C++언어 경험이 있다. 
주로 표준 라이브러리를 통해 콘솔창이나 파일에 입출력을 하는 작업 위주로 프로그래밍해왔다. 
개발툴의 경우 Visual Studio와 Editplus를 이용한 경험이 있다.

- 1.4
Python을 2D게임프로그래밍에서 처음 배우게 되었다. C/C++에 비해 직관적이고 간결한 Python을 능숙하게 까지는 아니더라도 잘 다룰 수 있도록 실력을 함양하고자 한다. 또한 아직까지는 직접 게임을 제작해본 경험이 없다. 이 수업을 통해 직접 2D 게임을 제작하여 게임 개발에 한 발짝 다가서고, 흥미를 가질 수 있도록 하고 싶다.  타 학우들에 비해 프로그래밍 실력이 많이 부족하다고 생각한다. 물론 열심히 노력하겠지만 특별히 더 열심히 노력하고자 한다. 

2.
지난 1학년 2학기에 C++ 프로그래밍 강의를 수강하며 C++에 대해 기본적으로 알게 되었으나, 객체지향에 대해 설명할 만큼 알고 있지는 않았다. 제공해주신 슬라이드를 보며 객체지향의 개념을 정확히 알게 되었고, 설명할 수 있게 되었다.

객체지향(OOP)은 프로그래밍 인식 체계 중 하나로, 객체와 객체간의 역할과 관계를 중심으로 이루어져 있다. 
객체지향 프로그래밍 언어는 캡슐화, 상속성, 다형성의 특성을 지원한다.
이에 대해 설명해보자면, 데이터와 데이터를 다루는 방식을 묶은 것을 캡슐화라고 한다. 객체지향 프로그래밍 언어는 상속 계층을 따라 클래스가 가지고 있는 특성을 공유한다. 또한 상속성의 계층을 따라 동일한 명령을 각기 다른 오브젝트에 사용할 수 있다. 

구조적 프로그래밍은 단일성을 띠고 있으며, 기능적으로 분할되어 절차 중심적인 방식이다. (파스칼, C)
반면 객체지향 프로그래밍은 재사용성을 띠고 있으며 객체와 객체간 역할과 관계 중심적인 방식이다. (JAVA, C++)

이처럼 내가 알고 있고, 기본적으로 구현할 수 있는 언어인 C와 C++을 통해 구조적 프로그래밍과 객체지향 프로그래밍을 비교해보며 객체지향에 대해 이해할 수 있었다. 

3. 
- 3.1
커맨드 라인(Command Line)
: 텍스트 기반의 응용 프로그램으로, 파일 보기, 처리, 조작이 가능하다.

해당 사이트에서는명령 프롬프트에 직접 명령어를 입력하여 새로운 디렉터리를 만들거나, 삭제하는 방식을 소개하고 있다. 
윈도우를 이용하고 있어 윈도우 기준으로 요약해보자면, 
명령어 cd는 디렉터리 변경 (cd 2dgp : 2dgp로 디렉터리 변경 / cd .. 의 경우 상위 디렉터리로 변경)
명령어 dir은 디렉터리 목록 출력 
명령어 mkdir은 디렉터리 생성 (mkdir 2dgp : 2dgp 디렉터리 생성)
명령어 rmdir은 디렉터리 삭제 (rmdir /S 2dgp -> y : 2dgp 디렉터리 삭제)

- 3.2
나는 커맨드 라인 방식에 대해 6정도 숙련되어 있다.
이제 주어진 사이트의 설명을 참고하지 않고 편하게 구현할 수 있다.
